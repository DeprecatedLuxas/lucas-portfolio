// THIS FILE IS AUTOGENERATED BY ./scripts/update-site.ts. DO NOT EDIT THIS FILE DIRECTLY.

export type Project = typeof projects[number];

export const projects = [
  {
    name: "projectrc",
    nameWithOwner: "luxass/projectrc",
    description: "‚öôÔ∏è Customize my projects on luxass.dev",
    pushedAt: "2023-12-16T11:53:40Z",
    url: "https://github.com/luxass/projectrc",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      website: true,
      $gitPath: "https://api.github.com/repos/luxass/projectrc/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/projectrc/rc",
    },
    $values: {
      description: "‚öôÔ∏è Customize my projects on luxass.dev",
      title: "projectrc",
      name: "projectrc",
      website: "https://projectrc.luxass.dev",
    },
  },
  {
    name: "tsup-problem-matchers",
    nameWithOwner: "luxass/tsup-problem-matchers",
    description: "Problem matchers for tsup tasks in VSCode",
    pushedAt: "2023-12-09T06:57:57Z",
    url: "https://github.com/luxass/tsup-problem-matchers",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "JavaScript",
      color: "#f1e05a",
    },
    $projectrc: {
      website: true,
      $gitPath: "https://api.github.com/repos/luxass/tsup-problem-matchers/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/tsup-problem-matchers/rc",
    },
    $values: {
      description: "Problem matchers for tsup tasks in VSCode",
      title: "tsup-problem-matchers",
      name: "tsup-problem-matchers",
      website: "https://marketplace.visualstudio.com/items?itemName=luxass.tsup-problem-matchers",
    },
  },
  {
    name: "esbuild-yaml",
    nameWithOwner: "luxass/esbuild-yaml",
    description: "A esbuild plugin, to allow import of YAML files",
    pushedAt: "2023-12-19T05:35:21Z",
    url: "https://github.com/luxass/esbuild-yaml",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      website: true,
      $gitPath: "https://api.github.com/repos/luxass/esbuild-yaml/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/esbuild-yaml/rc",
    },
    $values: {
      description: "A esbuild plugin, to allow import of YAML files",
      title: "esbuild-yaml",
      name: "esbuild-yaml",
      website: null,
    },
  },
  {
    name: "luxass.dev",
    nameWithOwner: "luxass/luxass.dev",
    description: "The website you're currently viewing.",
    pushedAt: "2023-12-26T16:52:34Z",
    url: "https://github.com/luxass/luxass.dev",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      description: "The website you're currently viewing.",
      $gitPath: "https://api.github.com/repos/luxass/luxass.dev/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/luxass.dev/rc",
    },
    $values: {
      description: "The website you're currently viewing.",
      title: "luxass.dev",
      name: "luxass.dev",
    },
  },
  {
    name: "jsonc-parse",
    nameWithOwner: "luxass/jsonc-parse",
    description: "A lightweight JSON with Comments parser.",
    pushedAt: "2023-12-26T15:49:43Z",
    url: "https://github.com/luxass/jsonc-parse",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/jsonc-parse/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/jsonc-parse/rc",
    },
    $values: {
      description: "A lightweight JSON with Comments parser.",
      title: "jsonc-parse",
      name: "jsonc-parse",
      readme: {
        content: "# jsonc-parse\n\n## ‚ú® Features\n\n- ESM Support\n- Tree Shakeable\n- Lightweight\n\n## üì¶ Installation\n\n```sh\npnpm install jsonc-parse\n```\n\n## üìö Usage\n\n```ts\nimport { parse, parseFile, parseFileSync } from \"jsonc-parse\";\n\n// From file async\nconst jsonCFile = await parseFile(\"./config.jsonc\");\n\n// From file\nconst jsonCFile = parseFileSync(\"./config.jsonc\");\n\n// From string\nconst jsonC = parse(`{\n  \"bar\": \"foo\",\n  // This is a comment.\n  \"foo\": /* This is also a comment */ \"bar\",\n}`);\n```\n\nyou can also just import the `strip` function to remove comments from a string.\n\n```ts\nimport { strip } from \"jsonc-parse/strip\";\n\n// or\nimport { strip } from \"jsonc-parse\";\n\nconst json = strip(`{\n  \"bar\": \"foo\",\n  // This is a comment.\n  \"foo\": /* This is also a comment */ \"bar\",\n}`);\nJSON.parse(strip(json)); // { bar: \"foo\", foo: \"bar\" }\n```\n\n## üíª Development\n\n- Clone this repository\n- Enable [Corepack](https://github.com/nodejs/corepack) using `corepack enable` (use `npm i -g corepack` for Node.js < 16.10)\n- Install dependencies using `pnpm install`\n- Run tests using `pnpm dev`\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n",
        path: "https://api.github.com/repos/luxass/jsonc-parse/readme",
      },
      npm: {
        name: "jsonc-parse",
        url: "https://www.npmjs.com/package/jsonc-parse",
        downloads: 552,
      },
    },
  },
  {
    name: "github-emojis",
    nameWithOwner: "luxass/github-emojis",
    description: "A list of all available emojis on GitHub",
    pushedAt: "2023-12-26T16:08:45Z",
    url: "https://github.com/luxass/github-emojis",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/github-emojis/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/github-emojis/rc",
    },
    $values: {
      description: "A list of all available emojis on GitHub",
      title: "github-emojis",
      name: "github-emojis",
      readme: {
        content: "# github-emojis\n\nAll GitHub's emojis in one place.\n<br/>\n<br/>\n\n## üì¶ Installation\n\n```sh\nnpm install github-emojis\n```\n\n## üìö Usage\n\n```ts\nimport {\n  emojis,\n  exists,\n  get,\n  getRaw,\n  parse\n} from \"github-emojis\";\n\n// Get all emojis\nconsole.log(emojis);\n\n// Check if an emoji exists\nconsole.log(exists(\"100\")); // true\n\n// Get an emoji by name\nconsole.log(get(\"100\")); // üíØ\n\n// Get an emoji url by name\nconsole.log(getRaw(\"100\")); // https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8\n\n// Parse a string with emojis\nconsole.log(parse(\"Hello :smile:\")); // Hello üòÑ\n```\n\n> If you only want to get the emoji urls, you can directly import the `emojis` object.\n\n```ts\nimport emojis from \"github-emojis/emojis\";\n```\n\n## All emojis\n\n> [!NOTE]  \n> You can view all on [github-emojis.luxass.dev](https://github-emojis.luxass.dev)\n\nPublished under [MIT License](./LICENSE).\n",
        path: "https://api.github.com/repos/luxass/github-emojis/readme",
      },
      npm: {
        name: "github-emojis",
        url: "https://www.npmjs.com/package/github-emojis",
        downloads: 7,
      },
    },
  },
  {
    name: "strip-json-comments",
    nameWithOwner: "luxass/strip-json-comments",
    description: "strip comments from your json",
    pushedAt: "2023-12-16T12:53:59Z",
    url: "https://github.com/luxass/strip-json-comments",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: {
        enabled: true,
        downloads: true,
      },
      $gitPath: "https://api.github.com/repos/luxass/strip-json-comments/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/strip-json-comments/rc",
    },
    $values: {
      description: "strip comments from your json",
      title: "strip-json-comments",
      name: "strip-json-comments",
      npm: {
        name: "@luxass/strip-json-comments",
        url: "https://www.npmjs.com/package/@luxass/strip-json-comments",
        downloads: 500,
      },
    },
  },
  {
    name: "hooxs",
    nameWithOwner: "luxass/hooxs",
    description: "Effortlessly empower your project with typed hooks, enabling you to easily construct a plugin API for your needs. ‚ú®",
    pushedAt: "2023-12-09T19:43:42Z",
    url: "https://github.com/luxass/hooxs",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      $gitPath: "https://api.github.com/repos/luxass/hooxs/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/hooxs/rc",
    },
    $values: {
      description: "Effortlessly empower your project with typed hooks, enabling you to easily construct a plugin API for your needs. ‚ú®",
      title: "hooxs",
      name: "hooxs",
      npm: {
        name: "hooxs",
        url: "https://www.npmjs.com/package/hooxs",
        downloads: 80,
      },
    },
  },
  {
    name: "github-languages",
    nameWithOwner: "luxass/github-languages",
    description: "üé® GitHub languages with colors and file extensions",
    pushedAt: "2023-12-16T10:50:42Z",
    url: "https://github.com/luxass/github-languages",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: {
        enabled: true,
        downloads: true,
      },
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/github-languages/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/github-languages/rc",
    },
    $values: {
      description: "üé® GitHub languages with colors and file extensions",
      title: "github-languages",
      name: "github-languages",
      readme: {
        content: "# üìã github-languages\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n\n## üì¶ Installation\n\n```sh\nnpm install @luxass/github-languages\n```\n\n## üìö Usage\n\n```ts\nimport { Java, Kotlin } from \"@luxass/github-languages\";\n\n// we are exporting more languages.\nJava.type; // \"programming\"\nJava.extensions; // [\".java\"]\nJava.color; // \"#b07219\"\n```\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/@luxass/github-languages?style=flat&colorA=18181B&colorB=4169E1\n[npm-version-href]: https://npmjs.com/package/@luxass/github-languages\n[npm-downloads-src]: https://img.shields.io/npm/dm/@luxass/github-languages?style=flat&colorA=18181B&colorB=4169E1\n[npm-downloads-href]: https://npmjs.com/package/@luxass/github-languages\n",
        path: "https://api.github.com/repos/luxass/github-languages/readme",
      },
      npm: {
        name: "@luxass/github-languages",
        url: "https://www.npmjs.com/package/@luxass/github-languages",
        downloads: 73,
      },
    },
  },
  {
    name: "elysius",
    nameWithOwner: "luxass/elysius",
    description: "Find a file or directory by traversing",
    pushedAt: "2023-12-26T15:35:21Z",
    url: "https://github.com/luxass/elysius",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/elysius/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/elysius/rc",
    },
    $values: {
      description: "Find a file or directory by traversing",
      title: "elysius",
      name: "elysius",
      readme: {
        content: "# elysius\n\n## ‚ú® Features\n\n- ESM Support\n- Tree Shakeable\n- Supports `async` and `sync` functions\n\n## üì¶ Installation\n\n```sh\npnpm install elysius\n```\n\n## üìö Usage\n\n```ts\nimport { find, findSync } from \"elysius\";\n\nconst path = await find(\"package.json\"); // returns `null` if not found\nconst path = findSync(\"package.json\"); // returns `null` if not found\n\nconst path = await find([\"package.json\", \"tsconfig.json\"]); // returns the first found file\nconst path = findSync([\"package.json\", \"tsconfig.json\"]); // returns the first found file\n\nconst path = await find([\"package.json\", \"tsconfig.json\"], {\n  cwd: \"src\",\n  async test: (path) => {\n    const base = basename(file);\n    if (base === \"package.json\") {\n      const content = JSON.parse(await readFile(file, \"utf-8\"));\n      return content.version;\n    }\n    return false;\n  }\n}); // returns `package.json` if it has a version field\n\nconst path = findSync([\"package.json\", \"tsconfig.json\"], {\n  cwd: \"src\",\n  test: (path) => {\n    const base = basename(file);\n    if (base === \"package.json\") {\n      const content = JSON.parse(readFileSync(file, \"utf-8\"));\n      return content.version;\n    }\n    return false;\n  }\n}); // returns `package.json` if it has a version field\n```\n\n## üíª Development\n\n- Clone this repository\n- Enable [Corepack](https://github.com/nodejs/corepack) using `corepack enable` (use `npm i -g corepack` for Node.js < 16.10)\n- Install dependencies using `pnpm install`\n- Run tests using `pnpm dev`\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n",
        path: "https://api.github.com/repos/luxass/elysius/readme",
      },
      npm: {
        name: "elysius",
        url: "https://www.npmjs.com/package/elysius",
        downloads: 20,
      },
    },
  },
  {
    name: "unplugin-yaml",
    nameWithOwner: "luxass/unplugin-yaml",
    description: null,
    pushedAt: "2023-12-26T16:25:49Z",
    url: "https://github.com/luxass/unplugin-yaml",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/unplugin-yaml/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/unplugin-yaml/rc",
    },
    $values: {
      title: "unplugin-yaml",
      name: "unplugin-yaml",
      readme: {
        content: "# unplugin-yaml\n\nAllow import YAML file for Vite, Webpack, Rollup and esbuild. With TypeScript support. Powered by [unplugin](https://github.com/unjs/unplugin).\n\n## Install\n\n```bash\nnpm i -D unplugin-yaml\n```\n\n<details>\n<summary>Vite</summary><br/>\n\n```ts\n// vite.config.ts\nimport YAMLPlugin from \"unplugin-yaml/vite\";\n\nexport default defineConfig({\n  plugins: [\n    YAMLPlugin({ /* options */ }),\n  ],\n});\n```\n\nExample: [`playground/vite`](./playground/vite)\n\n<br/></details>\n\n<details>\n<summary>Rollup</summary><br/>\n\n```ts\n// rollup.config.js\nimport YAMLPlugin from \"unplugin-yaml/rollup\";\n\nexport default {\n  plugins: [\n    YAMLPlugin({ /* options */ }),\n  ],\n};\n```\n\nExample: [`playground/rollup`](./playground/rollup)\n\n<br/></details>\n\n<details>\n<summary>Webpack</summary><br/>\n\n```ts\n// webpack.config.js\nmodule.exports = {\n  /* ... */\n  plugins: [\n    require(\"unplugin-yaml/webpack\").default({ /* options */ }),\n  ],\n};\n```\n\nExample: [`playground/webpack`](./playground/webpack)\n\n<br/></details>\n\n<details>\n<summary>Nuxt</summary><br/>\n\n```ts\n// nuxt.config.js\nexport default defineNuxtConfig({\n  modules: [\n    [\"unplugin-yaml/nuxt\", { /* options */ }]\n  ],\n});\n```\n\n<br/></details>\n\n<details>\n<summary>esbuild</summary><br/>\n\n```ts\n// esbuild.config.js\nimport { build } from \"esbuild\";\nimport YAMLPlugin from \"unplugin-yaml/esbuild\";\n\nbuild({\n  /* ... */\n  plugins: [\n    YAMLPlugin({\n      /* options */\n    }),\n  ],\n});\n```\n\n<br/></details>\n\n## Configuration\n\n```ts\nYAMLPlugin({\n  include: [\n    /\\.yamlcustom$/, // .yamlcustom\n  ],\n  parserOptions: {\n    // see js-yaml load options\n  }\n\n});\n```\n### TypeScript\n\nIf you are using TypeScript, you need to add the following to your `tsconfig.json` file:\n\n```json\n{\n  \"compilerOptions\": {\n    \"types\": [\n      \"unplugin-yaml/types\"\n    ]\n  }\n}\n```\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n",
        path: "https://api.github.com/repos/luxass/unplugin-yaml/readme",
      },
      npm: {
        name: "unplugin-yaml",
        url: "https://www.npmjs.com/package/unplugin-yaml",
        downloads: 100,
      },
    },
  },
  {
    name: "github-schema",
    nameWithOwner: "luxass/github-schema",
    description: "GitHub's GraphQL schema",
    pushedAt: "2023-12-21T18:22:44Z",
    url: "https://github.com/luxass/github-schema",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/github-schema/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/github-schema/rc",
    },
    $values: {
      description: "GitHub's GraphQL schema",
      title: "github-schema",
      name: "github-schema",
      readme: {
        content: "# üìã github-schema\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n\nGitHub's GraphQL Schema\n\n## üì¶ Installation\n\n```sh\nnpm install github-schema\n```\n\n## üìö Usage\n\n```ts\nimport { gql, gqlTyped } from \"github-schema\";\n\n// we are also exporting a ton of types from the graphql schema.\n\nconst REPOSITORY_QUERY = gql`\n  query getRepository($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      nameWithOwner\n      description\n      pushedAt\n      url\n      defaultBranchRef {\n        name\n      }\n      languages(first: 1, orderBy: { field: SIZE, direction: DESC }) {\n        nodes {\n          name\n          color\n        }\n      }\n    }\n  }\n`;\n```\n\n> [!NOTE]\n> If you want to use `gql` with return type of `DocumentNode` you can do something like this:\n\n```ts\nimport { gqlTyped } from \"github-schema\";\n```\n\n## Editor Autocompletion\n\n> [!TIP]\n> You will need to have [GraphQL LSP](https://marketplace.visualstudio.com/items?itemName=GraphQL.vscode-graphql) installed, and have a `.graphqlrc.yaml` file in your project root.\n> If you also want nice colors, i would recommend [GraphQL Syntax Highlighting](https://marketplace.visualstudio.com/items?itemName=GraphQL.vscode-graphql-syntax) installed.\n\n```yaml\n# .graphqlrc.yaml\nschema: node_modules/github-schema/schema.graphql\n```\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/github-schema?style=flat&colorA=18181B&colorB=4169E1\n[npm-version-href]: https://npmjs.com/package/github-schema\n[npm-downloads-src]: https://img.shields.io/npm/dm/github-schema?style=flat&colorA=18181B&colorB=4169E1\n[npm-downloads-href]: https://npmjs.com/package/github-schema\n",
        path: "https://api.github.com/repos/luxass/github-schema/readme",
      },
      npm: {
        name: "github-schema",
        url: "https://www.npmjs.com/package/github-schema",
        downloads: 771,
      },
    },
  },
  {
    name: "volapyk",
    nameWithOwner: "luxass/volapyk",
    description: null,
    pushedAt: "2023-12-21T17:29:29Z",
    url: "https://github.com/luxass/volapyk",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/volapyk/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/volapyk/rc",
    },
    $values: {
      title: "volapyk",
      name: "volapyk",
      readme: {
        content: "# üó£Ô∏è volapyk\n\n`/v…îl…ëÀàpyg/`, \"volapyk\", or \"volap√ºk\"\n\n## üì¶ Installation\n\n```sh\npnpm install volapyk\n```\n\n## üìö Usage\n\n```ts\nimport { createVolapyk, createVolapykChunks, createVolapykText } from \"volapyk\";\n\nconst volapyk = createVolapyk({\n  type: \"text\",\n  words: 10\n});\n\n// will create a text string of 10 words\n\n// use a different charset\nconst volapyk = createVolapyk({\n  type: \"text\",\n  words: 10,\n  chars: \"abcdefghijkl\"\n});\n\n// will create a text string of 10 words using only the characters \"abcdefghijkl\"\n\n// create chunks instead of a string, or you can use the createVolapykChunks function\nconst volapyk = createVolapyk({\n  type: \"chunks\"\n});\n```\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n",
        path: "https://api.github.com/repos/luxass/volapyk/readme",
      },
      npm: {
        name: "volapyk",
        url: "https://www.npmjs.com/package/volapyk",
        downloads: 393,
      },
    },
  },
  {
    name: "eslint-config",
    nameWithOwner: "luxass/eslint-config",
    description: "üîß My ESLint Config",
    pushedAt: "2023-12-26T21:04:40Z",
    url: "https://github.com/luxass/eslint-config",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/eslint-config/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/eslint-config/rc",
    },
    $values: {
      description: "üîß My ESLint Config",
      title: "eslint-config",
      name: "eslint-config",
      readme: {
        content: "# @luxass/eslint-config\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n\n> [!IMPORTANT]\n> The configuration is not currently finished, it could change at any moment.\n\n## ‚ú® Features\n\n- Based on [Antfu's ESLint Config](https://github.com/antfu/eslint-config)\n- Auto fix for formatting (aimed to be used standalone **without** Prettier)\n- Designed to work with TypeScript, JSX, Vue & Astro out-of-box\n- Lints also for json, yaml, markdown\n- Sorted imports, dangling commas\n- Reasonable defaults, best practices, only one-line of config\n- Opinionated, but [very customizable](#customization)\n- [ESLint Flat config](https://eslint.org/docs/latest/use/configure/configuration-files-new), compose easily!\n- Using [ESLint Stylistic](https://github.com/eslint-stylistic/eslint-stylistic)\n- Respects `.gitignore` by default\n- Optional [formatters](#formatters) support for CSS, HTML, TOML, etc.\n\n## üì¶ Install\n\n```bash\npnpm install -D eslint @luxass/eslint-config\n```\n\n## üöÄ Usage\n\nWith [`\"type\": \"module\"`](https://nodejs.org/api/packages.html#type) in `package.json` (recommended):\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass();\n```\n\nWith CJS:\n\n```js\n// eslint.config.js\nconst luxass = require(\"@luxass/eslint-config\").default;\n\nmodule.exports = luxass();\n```\n\nCombined with legacy config:\n\n```js\n// eslint.config.js\nconst luxass = require(\"@luxass/eslint-config\").default;\nconst { FlatCompat } = require(\"@eslint/eslintrc\");\n\nconst compat = new FlatCompat();\n\nmodule.exports = luxass(\n  {\n    ignores: [],\n  },\n\n  // Legacy config\n  ...compat.config({\n    extends: [\n      \"eslint:recommended\",\n      // Other extends...\n    ],\n  })\n\n  // Other flat configs...\n);\n```\n\n> Note that `.eslintignore` no longer works in Flat config, see [customization](#customization) for more details.\n\n## Setup for Visual Studio Code\n\nInstall [ESLint extension](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) and add the following to your `.vscode/settings.json`:\n\n```jsonc\n// .vscode/settings.json\n{\n  // will ensure that eslint can use the experimental flat config\n  \"eslint.experimental.useFlatConfig\": true,\n\n  // disable the default formatter\n  \"prettier.enable\": false,\n  \"editor.formatOnSave\": false,\n\n  // auto fix on save\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": \"explicit\",\n    \"source.organizeImports\": \"never\"\n  },\n\n  // silent the stylistic rules in you IDE, but still auto fix them\n  \"eslint.rules.customizations\": [\n    { \"rule\": \"style/*\", \"severity\": \"off\" },\n    { \"rule\": \"*-indent\", \"severity\": \"off\" },\n    { \"rule\": \"*-spacing\", \"severity\": \"off\" },\n    { \"rule\": \"*-spaces\", \"severity\": \"off\" },\n    { \"rule\": \"*-order\", \"severity\": \"off\" },\n    { \"rule\": \"*-dangle\", \"severity\": \"off\" },\n    { \"rule\": \"*-newline\", \"severity\": \"off\" },\n    { \"rule\": \"*quotes\", \"severity\": \"off\" },\n    { \"rule\": \"*semi\", \"severity\": \"off\" }\n  ],\n\n  // The following is optional.\n  // It's better to put under project setting `.vscode/settings.json`\n  // to avoid conflicts with working with different eslint configs\n  // that does not support all formats.\n  \"eslint.validate\": [\n    \"javascript\",\n    \"javascriptreact\",\n    \"typescript\",\n    \"typescriptreact\",\n    \"vue\",\n    \"html\",\n    \"markdown\",\n    \"json\",\n    \"jsonc\",\n    \"yaml\"\n  ]\n}\n```\n\n## Customization\n\nNormally you would only need to import the `luxass` preset:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass();\n```\n\nyou can also configure each `config` individually:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  stylistic: true,\n  typescript: true,\n  vue: true,\n  react: false,\n  astro: true,\n  unocss: true,\n\n  // `.eslintignore` is no longer supported in Flat config, use `ignores` instead.\n  ignores: [\n    \"./fixtures\"\n  ]\n});\n```\n\nThe `luxass` function accepts an arbitrary number of `flat configs` overrides:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  // configuration points for my config\n}, {\n  rules: {}\n}, {\n  rules: {}\n});\n```\n\n<details>\n<summary>Advanced Example</summary>\n\nWe don't recommend using this style in general usages, as there are shared options between configs and might need extra care to make them consistent.\n\n```js\n// eslint.config.js\nimport {\n  comments,\n  ignores,\n  imports,\n  javascript,\n  jsdoc,\n  jsonc,\n  markdown,\n  node,\n  sortPackageJson,\n  sortTsconfig,\n  stylistic,\n  typescript,\n  unicorn,\n  vue,\n  yaml,\n} from \"@luxass/eslint-config/configs\";\n\nimport { combine } from \"@luxass/eslint-config\";\n\nexport default combine(\n  ignores(),\n  javascript(/* Options */),\n  comments(),\n  node(),\n  jsdoc(),\n  imports(),\n  unicorn(),\n  typescript(/* Options */),\n  stylistic(),\n  vue(),\n  jsonc(),\n  yaml(),\n  markdown(),\n);\n```\n\n</details>\n\nCheck out the [configs](https://github.com/luxass/eslint-config/blob/main/src/configs) and [factory](https://github.com/luxass/eslint-config/blob/main/src/factory.ts) for more details.\n\n> Thanks to [sxzz/eslint-config](https://github.com/sxzz/eslint-config) and [antfu/eslint-config](https://github.com/antfu/eslint-config) for the inspiration and references.\n\n### Plugins Renaming\n\nSince flat config requires us to explicitly provide the plugin names (instead of mandatory convention from npm package name), we renamed some plugins to make overall scope more consistent and easier to write.\n\n| New Prefix | Original Prefix        | Source Plugin                                                                              |\n| ---------- | ---------------------- | ------------------------------------------------------------------------------------------ |\n| `import/*` | `i/*`                  | [eslint-plugin-i](https://github.com/un-es/eslint-plugin-i)                                |\n| `node/*`   | `n/*`                  | [eslint-plugin-n](https://github.com/eslint-community/eslint-plugin-n)                     |\n| `yaml/*`   | `yml/*`                | [eslint-plugin-yml](https://github.com/ota-meshi/eslint-plugin-yml)                        |\n| `ts/*`     | `@typescript-eslint/*` | [@typescript-eslint/eslint-plugin](https://github.com/typescript-eslint/typescript-eslint) |\n| `style/*`  | `@stylistic/*`         | [@stylistic/eslint-plugin](https://github.com/eslint-stylistic/eslint-stylistic)           |\n| `test/*`   | `vitest/*`             | [eslint-plugin-vitest](https://github.com/veritem/eslint-plugin-vitest)                    |\n| `test/*`   | `no-only-tests/*`      | [eslint-plugin-no-only-tests](https://github.com/levibuzolic/eslint-plugin-no-only-tests)  |\n\nWhen you want to override rules, or disable them inline, you need to update to the new prefix:\n\n```diff\n-// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\n+// eslint-disable-next-line ts/consistent-type-definitions\ntype foo = { bar: 2 }\n```\n\n### Rules Overrides\n\nCertain rules would only be enabled in specific files, for example, `ts/*` rules would only be enabled in `.ts` files and `vue/*` rules would only be enabled in `.vue` files. If you want to override the rules, you need to specify the file extension:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass(\n  { vue: true, typescript: true },\n  {\n    // Remember to specify the file glob here, otherwise it might cause the vue plugin to handle non-vue files\n    files: [\"**/*.vue\"],\n    rules: {\n      \"vue/operator-linebreak\": [\"error\", \"before\"],\n    },\n  },\n  {\n    // Without `files`, they are general rules for all files\n    rules: {\n      \"style/semi\": [\"error\", \"never\"],\n    },\n  }\n);\n```\n\nWe also provided a `overrides` options to make it easier:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  overrides: {\n    vue: {\n      \"vue/operator-linebreak\": [\"error\", \"before\"],\n    },\n    typescript: {\n      \"ts/consistent-type-definitions\": [\"error\", \"interface\"],\n    },\n    yaml: {},\n    // ...\n  }\n});\n```\n\n### Optional Configs\n\nWe provide some optional configs for specific use cases, that we don't include their dependencies by default.\n\n#### Formatters\n\n> [!WARNING]\n> Experimental feature, changes might not follow semver.\n\nUse external formatters to format files that ESLint cannot handle yet (`.css`, `.html`, etc). Powered by [`eslint-plugin-format`](https://github.com/antfu/eslint-plugin-format).\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  formatters: {\n    /**\n     * Format CSS, LESS, SCSS files, also the `<style>` blocks in Vue\n     * By default uses Prettier\n     */\n    css: true,\n    /**\n     * Format HTML files\n     * By default uses Prettier\n     */\n    html: true,\n    /**\n     * Format TOML files\n     * Currently only supports dprint\n     */\n    toml: \"dprint\",\n    /**\n     * Format Markdown files\n     * Supports Prettier and dprint\n     * By default uses Prettier\n     */\n    markdown: \"prettier\"\n  }\n});\n```\n\nRunning `npx eslint` should prompt you to install the required dependencies, otherwise, you can install them manually:\n\n```bash\nnpm i -D eslint-plugin-format\n```\n\n#### React\n\nTo enable React support, need to explicitly turn it on:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  react: true,\n});\n```\n\nRunning `npx eslint` should prompt you to install the required dependencies, otherwise, you can install them manually:\n\n```bash\nnpm i -D eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-refresh\n```\n\n#### Next.JS\n\nTo enable Next.JS support, need to explicitly turn it on:\n\nNext.JS also enables React support.\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  nextjs: true,\n});\n```\n\nRunning `npx eslint` should prompt you to install the required dependencies, otherwise, you can install them manually:\n\n```bash\nnpm i -D eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-react-refresh @next/eslint-plugin-next\n```\n\n#### UnoCSS\n\nTo enable UnoCSS support, need to explicitly turn it on:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  unocss: true,\n});\n```\n\nRunning `npx eslint` should prompt you to install the required dependencies, otherwise, you can install them manually:\n\n```bash\nnpm i -D @unocss/eslint-plugin\n```\n\n### Optional Rules\n\nThis config also provides some optional plugins/rules for extended usages.\n\n#### `perfectionist` (sorting)\n\nThis plugin [`eslint-plugin-perfectionist`](https://github.com/azat-io/eslint-plugin-perfectionist) allows you to sorted object keys, imports, etc, with auto-fix.\n\nThe plugin is installed but no rules are enabled by default.\n\nIt's recommended to opt-in on each file individually using [configuration comments](https://eslint.org/docs/latest/use/configure/rules#using-configuration-comments-1).\n\n```js\n/* eslint perfectionist/sort-objects: \"error\" */\nconst objectWantedToSort = {\n  a: 2,\n  b: 1,\n  c: 3,\n};\n/* eslint perfectionist/sort-objects: \"off\" */\n```\n\n### Type Aware Rules\n\nYou can optionally enable the [type aware rules](https://typescript-eslint.io/linting/typed-linting/) by passing the options object to the `typescript` config:\n\n```js\n// eslint.config.js\nimport luxass from \"@luxass/eslint-config\";\n\nexport default luxass({\n  typescript: {\n    tsconfigPath: \"tsconfig.json\",\n  },\n});\n```\n\n## Versioning Policy\n\nThis project follows [Semantic Versioning](https://semver.org/) for releases. However, since this is just a config and involves opinions and many moving parts, we don't treat rules changes as breaking changes.\n\n### Changes Considered as Breaking Changes\n\n- Node.js version requirement changes\n- Huge refactors that might break the config\n- Plugins made major changes that might break the config\n- Changes that might affect most of the codebases\n\n### Changes Considered as Non-breaking Changes\n\n- Enable/disable rules and plugins (that might become stricter)\n- Rules options changes\n- Version bumps of dependencies\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/@luxass/eslint-config?style=flat&colorA=18181B&colorB=4169E1\n[npm-version-href]: https://npmjs.com/package/@luxass/eslint-config\n[npm-downloads-src]: https://img.shields.io/npm/dm/@luxass/eslint-config?style=flat&colorA=18181B&colorB=4169E1\n[npm-downloads-href]: https://npmjs.com/package/@luxass/eslint-config\n",
        path: "https://api.github.com/repos/luxass/eslint-config/readme",
      },
      npm: {
        name: "@luxass/eslint-config",
        url: "https://www.npmjs.com/package/@luxass/eslint-config",
        downloads: 2429,
      },
    },
  },
  {
    name: "utils",
    nameWithOwner: "luxass/utils",
    description: "A collection of utilities for JavaScript/TypeScript",
    pushedAt: "2023-12-10T20:23:07Z",
    url: "https://github.com/luxass/utils",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      $gitPath: "https://api.github.com/repos/luxass/utils/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/utils/rc",
    },
    $values: {
      description: "A collection of utilities for JavaScript/TypeScript",
      title: "utils",
      name: "utils",
      readme: {
        content: "# utils\n\n[![npm version][npm-version-src]][npm-version-href]\n[![npm downloads][npm-downloads-src]][npm-downloads-href]\n\n## üì¶ Installation\n\n```sh\nnpm install @luxass/utils\n```\n\n## üìö Usage\n\nYou can view the documentation [here](https://www.jsdocs.io/package/@luxass/utils).\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n\n<!-- Badges -->\n\n[npm-version-src]: https://img.shields.io/npm/v/@luxass/utils?style=flat&colorA=18181B&colorB=4169E1\n[npm-version-href]: https://npmjs.com/package/@luxass/utils\n[npm-downloads-src]: https://img.shields.io/npm/dm/@luxass/utils?style=flat&colorA=18181B&colorB=4169E1\n[npm-downloads-href]: https://npmjs.com/package/@luxass/utils\n",
        path: "https://api.github.com/repos/luxass/utils/readme",
      },
      npm: {
        name: "@luxass/utils",
        url: "https://www.npmjs.com/package/@luxass/utils",
        downloads: 130,
      },
    },
  },
  {
    name: "lesetid",
    nameWithOwner: "luxass/lesetid",
    description: "üìñ A dead simple read time estimation",
    pushedAt: "2023-12-26T18:26:01Z",
    url: "https://github.com/luxass/lesetid",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      website: "https://lesetid.dev",
      workspace: {
        enabled: true,
        ignores: [
          "examples/*",
          "www",
        ],
        overrides: [
          {
            name: "vscode-reading-time",
            ignore: true,
          },
        ],
      },
      $gitPath: "https://api.github.com/repos/luxass/lesetid/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/lesetid/rc",
    },
    $values: {
      description: "üìñ A dead simple read time estimation",
      title: "lesetid",
      name: "lesetid",
      website: "https://lesetid.dev",
      readme: {
        content: "# üìñ lesetid\n\n`/leÀês…ôtiÀêd/`, Norwegian: \"lesetid\"\n\n## ‚ú® Features\n\n- ESM Support\n- Tree Shakeable\n- Using `CPM` (Characters Per Minute) to estimate for CJK languages\n- Streaming support\n- Implements [Medium's reading time algorithm](https://help.medium.com/hc/en-us/articles/214991667-Read-time).\n\n## üì¶ Installation\n\n```sh\npnpm install lesetid\n```\n\n## üìö Usage\n\n```ts\nimport { estimate } from \"lesetid\";\n\nconst {\n  minutes,\n  rawMinutes,\n  words\n} = estimate(\"Hello World!\");\n```\n\nor you can use the streaming approach\n\n```ts\nimport { Readable } from \"node:stream\";\nimport { createReadingTimeStream } from \"lesetid/stream\";\n\nconst readingTimeStream = await fetch(\"https://next.luxass.dev/projects/eslint-config/raw\")\n  .then((res) => Readable.from(res.body, {\n    encoding: \"utf-8\",\n  }))\n  .then((body) => body.pipe(createReadingTimeStream()));\n\nreadingTimeStream.on(\"data\", (data) => {\n  console.info(data);\n});\n```\n\n## üôå Acknowledgements\nI would like to thank [ngryman](https://github.com/ngryman) for his work on [reading-time](https://github.com/ngryman/reading-time) which inspired me to create this package.\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n",
        path: "https://api.github.com/repos/luxass/lesetid/contents/packages/lesetid/README.md",
      },
      npm: {
        name: "lesetid",
        url: "https://www.npmjs.com/package/lesetid",
        downloads: 154,
      },
    },
  },
  {
    name: "remark-lesetid",
    nameWithOwner: "luxass/lesetid",
    description: "üìñ A dead simple read time estimation",
    pushedAt: "2023-12-26T18:26:01Z",
    url: "https://github.com/luxass/lesetid",
    defaultBranch: "main",
    isContributor: false,
    language: {
      name: "TypeScript",
      color: "#3178c6",
    },
    $projectrc: {
      npm: true,
      readme: true,
      website: "https://lesetid.dev",
      workspace: {
        enabled: true,
        ignores: [
          "examples/*",
          "www",
        ],
        overrides: [
          {
            name: "vscode-reading-time",
            ignore: true,
          },
        ],
      },
      $gitPath: "https://api.github.com/repos/luxass/lesetid/contents/.github/projectrc.json",
      $path: "https://projectrc.luxass.dev/resolve/lesetid/rc",
    },
    $values: {
      description: "üìñ A dead simple read time estimation",
      title: "remark-lesetid",
      name: "remark-lesetid",
      website: "https://lesetid.dev",
      readme: {
        content: "# üìñ remark-lesetid\n\n```sh\npnpm install remark-lesetid\n```\n\n## üìö Usage\n\n```ts\nimport { remarkLesetid } from \"remark-lesetid\";\n```\n\nwe are also providing an `export` to directly hook into [`astro`](https://astro.build).\n\n```ts\nimport { remarkLesetid } from \"remark-lesetid/astro\";\nimport { defineConfig } from \"astro/config\";\n\n// https://astro.build/config\nexport default defineConfig({\n  markdown: {\n    remarkPlugins: [remarkLesetid]\n  },\n});\n```\n\n## üìÑ License\n\nPublished under [MIT License](./LICENSE).\n",
        path: "https://api.github.com/repos/luxass/lesetid/contents/packages/remark-lesetid/README.md",
      },
      npm: {
        name: "remark-lesetid",
        url: "https://www.npmjs.com/package/remark-lesetid",
        downloads: 102,
      },
    },
  },
];
